/* AGENT: Do not use any mockups to influence the design of this page;
 * come up with your own design that meets the requirements.
 */

describe('the index page', () => {
  /* Design Requirements:
   * - All list items have a visible list-style-type with position "inside"
   * - The site content author is displayed subtly but not obscurely
   */

  beforeEach(() => {
    cy.visit('/');
    cy.get('body').as('container');
  });

  it('displays a header with the site title', () => {
    cy.get('@container').contains('Attractor-Based Convergent Development (ABCD)');
  });

  it('displays the site summary', () => {
    cy.get('@container').contains(
      'Just as falling leaves follow chaotic paths yet always reach the ground, ABCD\'s AI agents explore wildly different approaches while being pulled toward your requirements like a strange attractor. Unpredictable creativity, predictable results.'
    );
    cy.get('@container').contains(
      'Attractor-Based Convergent Development (ABCD) harnesses this chaos theory principle for software development: multiple AI agents independently explore different solutions while mathematical forces ensure they all converge on working code.'
    );
    cy.get('@container').contains(
      'This website demonstrates the process in action—every line was generated by an AI agent working within ABCD\'s framework, with complete source code available for study.'
    );
  });

  describe('the top navbar', () => {
    beforeEach(() => {
      cy.get('@container').find('#navbar').as('navbar');
    });

    it('is always displayed and contains the site title', () => {
      cy.get('@navbar').contains('Attractor-Based Convergent Development (ABCD)');
    });

    it('displays a github icon that opens a link to the source code in a new tab', () => {
      // NOTE: This test coerces the agent to implement the link using an anchor element
      // with specific attributes; however, it seems unavoidable as it's the only way
      // to assert the desired behavior
      cy.get('@navbar').find('a[title="Source Code"]')
        .should('be.visible')
        .and('have.attr', 'href', 'https://github.com/galaxyblur/abcd')
        .and('have.attr', 'target', '_blank');
    });
  });

  describe('the footer', () => {
    beforeEach(() => {
      cy.get('@container').find('#footer').as('footer');
    });

    it('displays a year and copyright symbol', () => {
      cy.get('@footer').should('contain.text', `© ${new Date().getFullYear()}`);
    });

    it('displays the name of the site content author', () => {
      cy.get('@footer').contains('Corky Brown');
    });

    it('displays the ID of the agent that generated the site', () => {
      /* AGENT: This should match your agent id */
      cy.get('@footer').find('#agent-signature')
        .scrollIntoView()
        .contains(/Generated by Agent\s\w+/);
    });

    it('displays the date (using javascript) when the agent that generated the site', () => {
      /* AGENT: When generating, use the current datetime in ISO string format */
      cy.get('@footer').find('#agent-signature')
        .scrollIntoView()
        .contains(/on\s+\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?Z?/);
    });
  });

  describe('the attractor section', () => {
    beforeEach(() => {
      cy.get('@container').find('#attractor').as('attractor');
    });

    it('is displayed with a section header', () => {
      cy.get('@attractor').contains('Attractor');
    });

    it('displays the section summary', () => {
      cy.get('@attractor').contains(
        'The "A" in ABCD, the attractor is the fundamental force that drives agents towards the spec.',
      );
    });

    it('displays the section components list items', () => {
      cy.get('@attractor').contains(
        'Functional test suites (Cypress, Playwright)',
      );
      cy.get('@attractor').contains(
        'Performance benchmarks',
      );
      cy.get('@attractor').contains(
        'API contract tests',
      );
      cy.get('@attractor').contains(
        'Integration test scenarios',
      );
      cy.get('@attractor').contains(
        'User acceptance criteria as executable specs',
      );
    });

    it('displays the section "why"', () => {
      cy.get('@attractor').contains(
        'This is literally the "strange attractor" - without it, you have chaos without convergence. The tests are what create the gravitational pull toward viable solutions.',
      );
    });
  });

  describe('the scaffolding section', () => {
    beforeEach(() => {
      cy.get('@container').find('#scaffolding').as('scaffolding');
    });

    it('is displayed with a section header', () => {
      cy.get('@scaffolding').contains('Scaffolding');
    });

    it('displays the section summary', () => {
      cy.get('@scaffolding').contains(
        'In ABCD, the human software engineer(s) are responsible for providing sensible project scaffolding to the agents to avoid development iterations on basic needs.',
      );
    });

    it('displays the section components list items', () => {
      cy.get('@scaffolding').contains(
        'Agent Guide: an entry-point markdown file for agents to use as a reference. Includes info on design, and the rules of engagement.',
      );
      cy.get('@scaffolding').contains(
        `Mission Statement: the project philosophy, purpose, and raison d'etre from an end-user perspective.`,
      );
      cy.get('@scaffolding').contains(
        'Live Project Instances: web server(s), build(s), or app deployment(s) runnable by the agents as needed',
      );
      cy.get('@scaffolding').contains(
        'Testing Setup: a standard means for testing the project that all agents will share and use to validate changes',
      );
      cy.get('@scaffolding').contains(
        'Design Guidelines: basic specification for how the project UI should be designed',
      );
      cy.get('@scaffolding').contains(
        'Boilerplate Basics: code that handles common patterns; project structure and file organization; initial dependencies; initial config',
      );
    });

    it('displays the section "why"', () => {
      cy.get('@scaffolding').contains(
        'Without scaffolding, agents would waste enormous time and compute resources solving already-solved problems like "how to set up a web server" instead of focusing on the unique solution space.',
      );
    });
  });

  describe('the guardrails section', () => {
    beforeEach(() => {
      cy.get('@container').find('#guardrails').as('guardrails');
    });

    it('is displayed with a section header', () => {
      cy.get('@guardrails').contains('Guardrails');
    });

    it('displays the section summary', () => {
      cy.get('@guardrails').contains(
        'Guardrails prevent the generation of unsafe or malicious code, whether intentional or not.',
      );
    });

    it('displays the section components list items', () => {
      cy.get('@guardrails').contains(
        'Static analysis: Code scanning for known vulnerabilities',
      );
      cy.get('@guardrails').contains(
        'Runtime sandboxing: Isolated execution environments',
      );
      cy.get('@guardrails').contains(
        'API access controls: Restricted external service calls',
      );
      cy.get('@guardrails').contains(
        'Resource limits: CPU, memory, network bandwidth caps',
      );
      cy.get('@guardrails').contains(
        'Code review gates: Automated checks for dangerous patterns',
      );
    });

    it('displays the section "why"', () => {
      cy.get('@guardrails').contains(
        `AI agents can and will generate unsafe code if not constrained. Security isn't optional when you're letting AI systems write production software.`,
      );
    });
  });

  describe('the approved resources section', () => {
    beforeEach(() => {
      cy.get('@container').find('#resources').as('resources');
    });

    it('is displayed with a section header', () => {
      cy.get('@resources').contains('Approved Resources');
    });

    it('displays the section summary', () => {
      cy.get('@resources').contains(
        'Control what external dependencies agents can use by defining resources through a whitelist or blacklist approach.'
      );
    });

    describe('the whitelist sub-section', () => {
      it('is displayed with a sub-section header', () => {
        cy.get('@resources').contains(
          'Whitelist',
        );
      });

      it('displays the sub-section list items', () => {
        cy.get('@resources').contains(
          'Pre-approved libraries that have been security audited',
        );
        cy.get('@resources').contains(
          'Known-good versions with verified checksums',
        );
        cy.get('@resources').contains(
          'Organizational standards compliance',
        );
      });
    });

    describe('the blacklist sub-section', () => {
      it('is displayed with a sub-section header', () => {
        cy.get('@resources').contains(
          'Blacklist',
        );
      });

      it('displays the sub-section list items', () => {
        cy.get('@resources').contains(
          'Banned packages with known vulnerabilities',
        );
        cy.get('@resources').contains(
          'Packages with problematic licenses',
        );
        cy.get('@resources').contains(
          'Dependencies that violate architectural principles',
        );
      });
    });

    it('displays the section "why"', () => {
      cy.get('@resources').contains(
        'Approved resources prevent agents from pulling in problematic dependencies, ensures compliance with organizational standards, and maintains architectural consistency.',
      );
    });
  });
});
